import java.util.ArrayList;

import dataBean.Data;
import dataBean.Function;

public class DecisionTree {

	
	
	public void train(int nodeIndex, ArrayList<Data> trainData,
			Function[] tree) {
		if (zeroImpurity(trainData) || allSameX(trainData)) {
			return;
		} else {

		}
	}

	public void sortInputbyFeature(int f_index, ArrayList<Data> trainData) {

		int length = trainData.size();
		while (length > 0) {
			int max_index = 0;
			Data max = trainData.get(0);
			for (int i = 0; i < length; i++) {
				if (trainData.get(i).getX().get(f_index) > max.getX().get(f_index)) {
					max = trainData.get(i);
					max_index = i;
				}
			}
			length--;
			Data temp = trainData.get(length);
			trainData.set(length, max);
			trainData.set(max_index, temp);
		}
	}

	
	public ArrayList<Double> calThresholdbyFeature(int f_index, ArrayList<Data> trainData){
		ArrayList<Double> thresholds = new ArrayList<Double>();
		
		thresholds.add(trainData.get(0).getX().get(f_index)-1);
		for(int i=0;i<trainData.size();i++){
			if((i+1)!=trainData.size()){
				thresholds.add((trainData.get(i).getX().get(f_index)+trainData.get(i+1).getX().get(f_index))/2);
			}
			
		}
		thresholds.add(trainData.get(trainData.size()-1).getX().get(f_index)+1);
	}
	
	
	private boolean zeroImpurity(ArrayList<Data> trainData) {
		Data temp = trainData.get(0);
		for (Data d : trainData) {
			if (d.getY() != temp.getY()) {
				return false;
			}
		}
		return true;
	}

	private boolean allSameX(ArrayList<Data> trainData) {
		Data temp = trainData.get(0);
		for (Data d : trainData) {
			for (int i = 0; i < d.getX().size(); i++) {
				if (!d.getX().get(i).equals(temp.getX().get(i))) {
					return false;
				}
			}
		}
		return true;
	}

}
