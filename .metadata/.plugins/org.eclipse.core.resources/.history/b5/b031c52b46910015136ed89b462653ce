package FileReader;

import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;

import org.ejml.data.DenseMatrix64F;
import org.ejml.simple.SimpleMatrix;


public class ThreeTwoSplitReader extends MLFileReader{
	public static DenseMatrix64F train_X;
	public static SimpleMatrix train_Y;
	public static DenseMatrix64F val_X;
	public static SimpleMatrix val_Y;
	public static ArrayList<ArrayList<Double>> train_A_X = new ArrayList<ArrayList<Double>>();
	public static ArrayList<Double> train_A_Y = new ArrayList<Double>();
	public static ArrayList<ArrayList<Double>> val_A_X = new ArrayList<ArrayList<Double>>();
	public static ArrayList<Double> val_A_Y = new ArrayList<Double>();
	
	public void readFile(String path){		
		String  thisLine = null;
		int seperateLine=0;
		try{
	        // open input stream test.txt for reading purpose.
	        BufferedReader br = new BufferedReader(new FileReader(path));   
	        while ((thisLine = br.readLine()) != null) {
	        	seperateLine++;
	           String sep[] = thisLine.split(" |\t");
	           ArrayList<Double> item = new ArrayList<Double>();
	           item.add((double) 1);
	           item.add(Double.parseDouble(sep[0]));
	           item.add(Double.parseDouble(sep[1]));
	           
	           if(seperateLine<=120){
	        	   train_A_X.add(item);
	        	   train_A_Y.add(Double.parseDouble(sep[2]));
	           }else{
	        	   val_A_X.add(item);
	        	   val_A_Y.add(Double.parseDouble(sep[2]));
	        	   
	           }
	        }       
	     }catch(Exception e){
	        e.printStackTrace();
	     }
	}
	
	private void buildTrainMatrix(){
		double[][] _x= new double[train_A_X.size()][];
		train_Y= new SimpleMatrix(train_A_Y.size(),1);
		
		for(int i=0;i<train_A_X.size();i++){
			ArrayList<Double> row = train_A_X.get(i);
			double[] copy = new double[row.size()];
		    for (int j = 0; j < row.size(); j++) {
		        // Manually loop and set individually
		        copy[j] = row.get(j);
		    }
		    _x[i] = copy;
		    train_Y.set(i, 0,train_A_Y.get(i) );
		}
		
		train_X= new DenseMatrix64F(_x);
		
	}
	private void buildValMatrix(){
		double[][] _x= new double[val_A_X.size()][];
		val_Y= new SimpleMatrix(val_A_Y.size(),1);
		
		for(int i=0;i<val_A_X.size();i++){
			ArrayList<Double> row = val_A_X.get(i);
			double[] copy = new double[row.size()];
		    for (int j = 0; j < row.size(); j++) {
		        // Manually loop and set individually
		        copy[j] = row.get(j);
		    }
		    _x[i] = copy;
		    val_Y.set(i, 0,val_A_Y.get(i) );
		}
		
		val_X= new DenseMatrix64F(_x);
		
	}
	public void  build(String filePath){
		readFile(filePath);
		buildTrainMatrix();
		buildValMatrix();
	}
	
	public DenseMatrix64F getTrain_X(){
		return train_X;
	}
	
	public SimpleMatrix getTrain_Y(){
		return train_Y;
	}

	public DenseMatrix64F getVal_X(){
		return val_X;
	}
	
	public SimpleMatrix getVal_Y(){
		return val_Y;
	}

}
